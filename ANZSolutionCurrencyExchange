Programming Exercise – FX Calculator
Your task is to create a console-based currency converter application.
Requirements
The application allows a user to convert an amount in a specific currency to the equivalent amount in another currency.
Your calculator should allow a user to enter an amount in any of the known currencies, and provide the equivalent amount in another
currency.
Your calculator should parse console input like "<ccy1> <amount1> in <ccy2>", and provide a suitable response.
For example:
%> AUD 100.00 in USD
AUD 100.00 = USD 83.71
%> AUD 100.00 in AUD
AUD 100.00 = AUD 100.00
%> AUD 100.00 in DKK
AUD 100.00 = DKK 505.76
%> JPY 100 in USD
JPY 100 = USD 0.83
If the rate cannot be calculated, the program should alert the user:
%> KRW 1000.00 in FJD
Unable to find rate for KRW/FJD
When displaying amounts back to the user, they should be formatted with the precision given below:
AUD=2 decimal places

Classification: Public Version: 1.0.9
CAD=2 decimal places
CNY=2 decimal places
CZK=2 decimal places
DKK=2 decimal places
EUR=2 decimal places
GBP=2 decimal places
JPY=0 decimal places
NOK=2 decimal places
NZD=2 decimal places
USD=2 decimal places
The list of currency pairs and rates that you are given is:
AUDUSD=0.8371
CADUSD=0.8711
USDCNY=6.1715
EURUSD=1.2315
GBPUSD=1.5683
NZDUSD=0.7750
USDJPY=119.95
EURCZK=27.6028
EURDKK=7.4405
EURNOK=8.6651
In order to perform the required calculations, the program needs the amount of decimal places, currency pairs and rates above,
and also a table to show how to derive non-quoted/crossed rates.
Currency pairs are specified as <<BASE>> <<TERMS>> (sometimes written as BASE/TERMS - eg. AUD/USD).
Rates are always specified as "1 BASE = x TERMS", where x is the rate.
For example "AUDUSD=0.8371" means that 1 Australian Dollar is equivalent to 0.8371 United States Dollars.
The rates specified above are directly quoted, but they can also be used to create non quoted rates.
For example, in the simplest case, the AUDUSD rate can be used to derive USDAUD by simply inverting the rate.
"AUDUSD=0.8371" (1 AUD = 0.8371 USD) is the same as saying "USDAUD=1.1946" (1 USD = 1.1946 AUD).
A slightly more complicated example involves deriving a particular rate by "crossing" via another currency.

Classification: Public Version: 1.0.9
For example: you are asked for the AUDJPY rate - but there is no direct feed for this rate. Instead, you can "cross via USD" and use the
AUDUSD and USDJPY rates. This works by first converting AUD to USD, and then USD to JPY.
For example 1 AUD = 0.8371 USD
0.8371 USD = 100.41 JPY
--------------------------
1 AUD = 100.41 JPY

In order to help with the conversion, the following "cross-via" matrix may help. "Base" currencies are down the left, "terms" currencies
across the top.
/ AUD CAD CNY CZK DKK EUR GBP JPY NOK NZD USD
AUD 1:1 USD USD USD USD USD USD USD USD USD D
CAD USD 1:1 USD USD USD USD USD USD USD USD D
CNY USD USD 1:1 USD USD USD USD USD USD USD D
CZK USD USD USD 1:1 EUR Inv USD USD EUR USD EUR
DKK USD USD USD EUR 1:1 Inv USD USD EUR USD EUR
EUR USD USD USD D D 1:1 USD USD D USD D
GBP USD USD USD USD USD USD 1:1 USD USD USD D
JPY USD USD USD USD USD USD USD 1:1 USD USD Inv
NOK USD USD USD EUR EUR Inv USD USD 1:1 USD EUR
NZD USD USD USD USD USD USD USD USD USD 1:1 D
USD Inv Inv Inv EUR EUR Inv Inv D EUR Inv 1:1
D = direct feed - eg. the currency pair can be looked up directly.
Inv = inverted - eg. the currency pair can be looked up if base and terms are flipped (and rate = 1/rate)
1:1 = unity - the rate is always 1.
CCY = in order to calculate this rate, you need to cross via this currency.
You can choose to represent the above table however you choose. You may, for example, be able to use the inherent symmetry of the table
to derive a more compact representation.
As an example of using the table above, consider that you need to calculate an AUD/JPY rate:
- first, look up AUD/JPY in the above table.
- the resulting entry shows that you need to cross via USD
- next look up AUD/USD - the rate for this is fed direct
- now look up USD/JPY - also fed direct
- fetch the rates for AUD/USD and USD/JPY and generate the cross rate from there.

Classification: Public Version: 1.0.9
Similarly, to calculate NOK/USD
- look up NOK/USD in the table
- the resulting entry says to cross via EUR
- look up EUR/USD and EUR/NOK, and cross the two to find the NOK/USD rate.
Please use the above rates, and the above cross-via table to build your solution.
Rules
 You may not use any external libraries, other than those used to build or test your solution.
 Do not place your solution or this instruction sheet in the public domain (Github/Bitbucket etc), or share them with anyone else.
Deliverables
 The solution submitted should include structure, source code, configuration and any tests or test code you deem necessary - no need
to package class files.
 Solve the problem in Java, C# or in a specific language that you may have been directed to use.
 Solve the problem as though it were "production level" code that you would be able to run, maintain and evolve. We look at all
aspects of your solution including design and object oriented programming skills. Even though the problem is contrived, we’re looking
for something more than just an algorithm.
 It is not required to provide any graphical interface.
In order to get around firewall issues we recommend the solution be packaged as a password protected zip file.




Solution
----------------

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class CurrencyConverter {

	private static final String[][] currencyMatrix = {
			{ "", "AUD", "CAD", "CNY", "CZK", "DKK", "EUR", "GBP", "JPY", "NOK", "NZD", "USD" },
			{ "AUD", "1:1", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "D" },
			{ "CAD", "USD", "1:1", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "D" },
			{ "CNY", "USD", "USD", "1:1", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "D" },
			{ "CZK", "USD", "USD", "USD", "1:1", "EUR", "Inv", "USD", "USD", "USD", "USD", "EUR" },
			{ "DKK", "USD", "USD", "USD", "EUR", "1:1", "Inv", "USD", "USD", "USD", "USD", "EUR" },
			{ "EUR", "USD", "USD", "USD", "D", "D", "1:1", "USD", "USD", "USD", "USD", "D" },
			{ "GBP", "USD", "USD", "USD", "USD", "USD", "USD", "1:1", "USD", "USD", "USD", "D" },
			{ "JPY", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "1:1", "USD", "USD", "Inv" },
			{ "NOK", "USD", "USD", "USD", "EUR", "EUR", "Inv", "USD", "USD", "1:1", "USD", "EUR" },
			{ "NZD", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "USD", "1:1", "D" },
			{ "USD", "Inv", "Inv", "Inv", "EUR", "EUR", "Inv", "Inv", "D", "EUR", "Inv", "1:1" } };

	private static final Map<String, Double> rates = new HashMap<>();
	static {
		rates.put("AUDUSD", 0.8371);
		rates.put("CADUSD", 0.8711);
		rates.put("USDCNY", 6.1715);
		rates.put("EURUSD", 1.2315);
		rates.put("GBPUSD", 1.5683);
		rates.put("NZDUSD", 0.7750);
		rates.put("USDJPY", 119.95);
		rates.put("EURCZK", 27.6028);
		rates.put("EURDKK", 7.4405);
		rates.put("EURNOK", 8.6651);
	}

	private static final Map<String, Integer> currencyPrecision = new HashMap<>();
	static {
		currencyPrecision.put("AUD", 2);
		currencyPrecision.put("CAD", 2);
		currencyPrecision.put("CNY", 2);
		currencyPrecision.put("CZK", 2);
		currencyPrecision.put("DKK", 2);
		currencyPrecision.put("EUR", 2);
		currencyPrecision.put("GBP", 2);
		currencyPrecision.put("JPY", 0);
		currencyPrecision.put("NOK", 2);
		currencyPrecision.put("NZD", 2);
		currencyPrecision.put("USD", 2);
	}

	private static String findConversionPath(String fromCurrency, String toCurrency) {
		int fromIndex = -1;
		int toIndex = -1;
		for (int i = 1; i < currencyMatrix.length; i++) {
			if (currencyMatrix[i][0].equals(fromCurrency)) {
				fromIndex = i;
				break;
			}
		}
		for (int j = 1; j < currencyMatrix[0].length; j++) {
			if (currencyMatrix[0][j].equals(toCurrency)) {
				toIndex = j;
				break;
			}
		}
		if (fromIndex == -1 || toIndex == -1) {
			return String.format("Invalid currencies: %s or %s", fromCurrency, toCurrency);
		}
		String conversionPath = currencyMatrix[fromIndex][toIndex];
		return conversionPath;
	}

	public static String convertCurrency(String fromCurrency, double amount, String toCurrency) {
		List<String> cList = Arrays.asList("USD", "EUR");
		if (fromCurrency.equals(toCurrency)) {
			return String.format("%s %.2f = %s %.2f", fromCurrency, amount, toCurrency, amount);
		}

		String conversionType = findConversionPath(fromCurrency, toCurrency);
		if (conversionType != null) {
			if (cList.contains(conversionType)) {
				return tryCrossCurrencyConversion(fromCurrency, amount, toCurrency, cList);
			}
			if (conversionType.equals("D")) {
				if (rates.containsKey(fromCurrency + toCurrency)) {
					double convertedAmount = amount * rates.get(fromCurrency + toCurrency);
					return String.format("%s %.2f = %s %.2f (Direct Feed)", fromCurrency, amount, toCurrency,
							convertedAmount);
				}

			}
			if (conversionType.equals("Inv")) {
				if (rates.containsKey(toCurrency + fromCurrency)) {
					double rate = rates.get(toCurrency + fromCurrency);
					double convertedAmount = amount / rate;
					return String.format("%s %.2f = %s %.2f (Inverted)", fromCurrency, amount, toCurrency,
							convertedAmount);
				}
			}
			if (conversionType.equals("1:1")) {
				return String.format("%s %.2f = %s %.2f (1:1 Unity)", fromCurrency, amount, toCurrency, amount);
			}
			if (conversionType.equals("CCY")) {
				return tryCrossCurrencyConversion(fromCurrency, amount, toCurrency, cList);
			}
		}
		return "Conversion type not recognized.";
	}

	private static String tryCrossCurrencyConversion(String fromCurrency, double amount, String toCurrency,
			List<String> cList) {
		String conversionType = findConversionPath(fromCurrency, toCurrency);
		if (conversionType != null) {
			if (cList.contains(conversionType)) {
			List<Object> list=currencyChecker(fromCurrency, toCurrency, amount);
			conversionType=list.get(0).toString();
			fromCurrency=list.get(1).toString();
			toCurrency=list.get(2).toString();
			amount=Double.parseDouble(list.get(3).toString());
			}
			return currentExchanger(conversionType, fromCurrency, toCurrency, amount, cList);
		}
		return null;
	}

	private static List<Object> currencyChecker(String fromCurrency, String toCurrency, double amount) {
		List<String> cList = Arrays.asList("USD", "EUR");
		String conversionType = findConversionPath(fromCurrency, toCurrency);
		if (cList.contains(conversionType)) {
			double value = 1.0;
			if (rates.containsKey(fromCurrency + conversionType)) {
				value = rates.get(fromCurrency + conversionType);
			} else {
				double d = rates.containsKey(conversionType + fromCurrency) == true
						? rates.get(conversionType + fromCurrency)
						: 1;
				value = 1.0 / d;
			}
			double convertedAmount = amount * value;
			fromCurrency = conversionType;
			amount = convertedAmount;
			return currencyChecker(fromCurrency, toCurrency, convertedAmount);
		}
		return List.of(conversionType, fromCurrency, toCurrency, amount);
	}

	private static String currentExchanger(String conversionType, String fromCurrency, String toCurrency, double amount,
			List<String> cList) {
		if (conversionType.equals("D")) {
			double convertedAmount = amount * rates.get(fromCurrency + toCurrency);
			return String.format("%s %.2f = %s %.2f (Direct Feed)", fromCurrency, amount, toCurrency, convertedAmount);
		}
		if (conversionType.equals("Inv")) {
			double rate = rates.get(toCurrency + fromCurrency);
			double convertedAmount = amount / rate;
			return String.format("%s %.2f = %s %.2f (Inverted)", fromCurrency, amount, toCurrency, convertedAmount);
		}

		if (conversionType.equals("1:1")) {
			return String.format("%s %.2f = %s %.2f (1:1 Unity)", fromCurrency, amount, toCurrency, amount);
		}

		if (conversionType.equals("CCY")) {
			return tryCrossCurrencyConversion(fromCurrency, amount, toCurrency, cList);
		}
		return null;

	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		while (true) {
			System.out.println("Enter a conversion request (e.g., AUD 100 in USD), or type 'exit' to quit:");
			String input = scanner.nextLine();

			if (input.equalsIgnoreCase("exit")) {
				System.out.println("Exiting the currency converter. Goodbye!");
				break;
			}

			String[] inputParts = input.split(" ");
			if (inputParts.length != 4) {
				System.out.println("Invalid input format. Please try again.");
				continue;
			}

			String fromCurrency = inputParts[0];
			double amount;
			try {
				amount = Double.parseDouble(inputParts[1]);
			} catch (NumberFormatException e) {
				System.out.println("Invalid amount. Please enter a valid number.");
				continue;
			}
			String toCurrency = inputParts[3];

			// Perform conversion
			String result = convertCurrency(fromCurrency, amount, toCurrency);
			System.out.println(result);
		}

		scanner.close();
	}
}
